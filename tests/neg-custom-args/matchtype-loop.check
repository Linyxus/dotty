<289..289> in matchtype-loop.scala
Recursion limit exceeded.
Maybe there is an illegal cyclic reference?
If that's not the case, you could also try to increase the stacksize using the -Xss JVM option.
A recurring operation is (inner to outer):

  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  ...

  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
<447..447> in matchtype-loop.scala
Recursion limit exceeded.
Maybe there is an illegal cyclic reference?
If that's not the case, you could also try to increase the stacksize using the -Xss JVM option.
A recurring operation is (inner to outer):

  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  ...

  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
<303..303> in matchtype-loop.scala
Recursion limit exceeded.
Maybe there is an illegal cyclic reference?
If that's not the case, you could also try to increase the stacksize using the -Xss JVM option.
A recurring operation is (inner to outer):

  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  ...

  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
  reduce type  LazyRef(Test.LL[Int]) match ...
<205..205> in matchtype-loop.scala
Recursion limit exceeded.
Maybe there is an illegal cyclic reference?
If that's not the case, you could also try to increase the stacksize using the -Xss JVM option.
A recurring operation is (inner to outer):

  subtype LazyRef(Test.L[Int]) <:< Int